** Friday 7:25 PM EST: Created the three main annotations we'll need, copied from Hibernate. Unit.java has some rough
code on how we can use reflection to see the values of the annotations' params, when needed.

Next step is probably testing to ensure that parameter values are being stored properly, then thinking about how to
convert param values into SQL queries. **

- Use a daka.cfg.xml file to store information about the database of the ORM user.
    - Include: db endpoint address, db port, db master username, db master password
        - Ryan said we might be able to connect to the db using the EC2, meaning we can store connection details on the
          virtual server instead of requiring this setup step. Better safe than sorry, though...

- Use annotations to provide db information (table name, column name, IDs/primary keys).
    - Can edit already-existing classes.
    - Don't need to read from mapping .xml files (the alternative).
    - Use Reflection to read the values stored in annotations and build SQL queries with them.

- Create some type of Session class/object that reads from daka.cfg.xml to establish the db connection.
    - The Session would start, read data from cfg.xml, connect to the db, and process db operations
      until it's closed.

- For CRUD operations: Use Reflection to get the values of the fields in the passed-in Object.
    - These fields will correspond with the columns in the db table. Then, find a way to structure
      a JDBC PreparedStatement with variable fields/columns.