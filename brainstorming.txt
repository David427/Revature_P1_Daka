- Use a daka.cfg.xml file to store information about the database of the ORM user.
    - Include: db endpoint address, db port, db master username, db master password
    - Possibly include: table names? Column names?

- Use daka.xml files as mapping files to link @Entity classes and db tables.
    - Hibernate examples:
        <class name="Event" table="EVENTS">
        ...
        </class>

        <property name="date" type="timestamp" column="EVENT_DATE"/>
        <property name="title"/>

- Create some type of Session class/object that reads from daka.cfg.xml to establish the db connection
  and from daka.xml files to establish object/relation mapping (classes & fields -> tables & columns).
    - The Session would start, read data from all relevant files, connect to the db, and process db operations
      until it's closed.

- For CRUD operations: Use Reflection to get the values of the fields in the passed-in Object.
    - These fields will correspond with the columns in the db table. Then, find a way to structure
      a JDBC PreparedStatement with variable fields/columns.

-

-

-